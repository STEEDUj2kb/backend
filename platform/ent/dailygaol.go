// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/STEEDUj2kb/platform/ent/dailygaol"
	"github.com/STEEDUj2kb/platform/ent/study"
	"github.com/STEEDUj2kb/platform/ent/weeklygaol"
)

// DailyGaol is the model entity for the DailyGaol schema.
type DailyGaol struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Todo holds the value of the "todo" field.
	Todo string `json:"todo,omitempty"`
	// Done holds the value of the "done" field.
	Done bool `json:"done,omitempty"`
	// IsRemoved holds the value of the "is_removed" field.
	IsRemoved bool `json:"is_removed,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DailyGaolQuery when eager-loading is set.
	Edges              DailyGaolEdges `json:"edges"`
	study_dgoals       *int
	weekly_gaol_dgaols *int
}

// DailyGaolEdges holds the relations/edges for other nodes in the graph.
type DailyGaolEdges struct {
	// Study holds the value of the study edge.
	Study *Study `json:"study,omitempty"`
	// Wgoal holds the value of the wgoal edge.
	Wgoal *WeeklyGaol `json:"wgoal,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// StudyOrErr returns the Study value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DailyGaolEdges) StudyOrErr() (*Study, error) {
	if e.loadedTypes[0] {
		if e.Study == nil {
			// The edge study was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: study.Label}
		}
		return e.Study, nil
	}
	return nil, &NotLoadedError{edge: "study"}
}

// WgoalOrErr returns the Wgoal value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DailyGaolEdges) WgoalOrErr() (*WeeklyGaol, error) {
	if e.loadedTypes[1] {
		if e.Wgoal == nil {
			// The edge wgoal was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: weeklygaol.Label}
		}
		return e.Wgoal, nil
	}
	return nil, &NotLoadedError{edge: "wgoal"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DailyGaol) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case dailygaol.FieldDone, dailygaol.FieldIsRemoved:
			values[i] = new(sql.NullBool)
		case dailygaol.FieldID:
			values[i] = new(sql.NullInt64)
		case dailygaol.FieldTodo:
			values[i] = new(sql.NullString)
		case dailygaol.FieldCreatedAt, dailygaol.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case dailygaol.ForeignKeys[0]: // study_dgoals
			values[i] = new(sql.NullInt64)
		case dailygaol.ForeignKeys[1]: // weekly_gaol_dgaols
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type DailyGaol", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DailyGaol fields.
func (dg *DailyGaol) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case dailygaol.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			dg.ID = int(value.Int64)
		case dailygaol.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				dg.CreatedAt = value.Time
			}
		case dailygaol.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				dg.UpdatedAt = value.Time
			}
		case dailygaol.FieldTodo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field todo", values[i])
			} else if value.Valid {
				dg.Todo = value.String
			}
		case dailygaol.FieldDone:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field done", values[i])
			} else if value.Valid {
				dg.Done = value.Bool
			}
		case dailygaol.FieldIsRemoved:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_removed", values[i])
			} else if value.Valid {
				dg.IsRemoved = value.Bool
			}
		case dailygaol.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field study_dgoals", value)
			} else if value.Valid {
				dg.study_dgoals = new(int)
				*dg.study_dgoals = int(value.Int64)
			}
		case dailygaol.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field weekly_gaol_dgaols", value)
			} else if value.Valid {
				dg.weekly_gaol_dgaols = new(int)
				*dg.weekly_gaol_dgaols = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryStudy queries the "study" edge of the DailyGaol entity.
func (dg *DailyGaol) QueryStudy() *StudyQuery {
	return (&DailyGaolClient{config: dg.config}).QueryStudy(dg)
}

// QueryWgoal queries the "wgoal" edge of the DailyGaol entity.
func (dg *DailyGaol) QueryWgoal() *WeeklyGaolQuery {
	return (&DailyGaolClient{config: dg.config}).QueryWgoal(dg)
}

// Update returns a builder for updating this DailyGaol.
// Note that you need to call DailyGaol.Unwrap() before calling this method if this DailyGaol
// was returned from a transaction, and the transaction was committed or rolled back.
func (dg *DailyGaol) Update() *DailyGaolUpdateOne {
	return (&DailyGaolClient{config: dg.config}).UpdateOne(dg)
}

// Unwrap unwraps the DailyGaol entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dg *DailyGaol) Unwrap() *DailyGaol {
	tx, ok := dg.config.driver.(*txDriver)
	if !ok {
		panic("ent: DailyGaol is not a transactional entity")
	}
	dg.config.driver = tx.drv
	return dg
}

// String implements the fmt.Stringer.
func (dg *DailyGaol) String() string {
	var builder strings.Builder
	builder.WriteString("DailyGaol(")
	builder.WriteString(fmt.Sprintf("id=%v", dg.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(dg.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(dg.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", todo=")
	builder.WriteString(dg.Todo)
	builder.WriteString(", done=")
	builder.WriteString(fmt.Sprintf("%v", dg.Done))
	builder.WriteString(", is_removed=")
	builder.WriteString(fmt.Sprintf("%v", dg.IsRemoved))
	builder.WriteByte(')')
	return builder.String()
}

// DailyGaols is a parsable slice of DailyGaol.
type DailyGaols []*DailyGaol

func (dg DailyGaols) config(cfg config) {
	for _i := range dg {
		dg[_i].config = cfg
	}
}
