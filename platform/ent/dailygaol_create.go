// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/STEEDUj2kb/platform/ent/dailygaol"
	"github.com/STEEDUj2kb/platform/ent/study"
	"github.com/STEEDUj2kb/platform/ent/weeklygaol"
)

// DailyGaolCreate is the builder for creating a DailyGaol entity.
type DailyGaolCreate struct {
	config
	mutation *DailyGaolMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (dgc *DailyGaolCreate) SetCreatedAt(t time.Time) *DailyGaolCreate {
	dgc.mutation.SetCreatedAt(t)
	return dgc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dgc *DailyGaolCreate) SetNillableCreatedAt(t *time.Time) *DailyGaolCreate {
	if t != nil {
		dgc.SetCreatedAt(*t)
	}
	return dgc
}

// SetUpdatedAt sets the "updated_at" field.
func (dgc *DailyGaolCreate) SetUpdatedAt(t time.Time) *DailyGaolCreate {
	dgc.mutation.SetUpdatedAt(t)
	return dgc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dgc *DailyGaolCreate) SetNillableUpdatedAt(t *time.Time) *DailyGaolCreate {
	if t != nil {
		dgc.SetUpdatedAt(*t)
	}
	return dgc
}

// SetTodo sets the "todo" field.
func (dgc *DailyGaolCreate) SetTodo(s string) *DailyGaolCreate {
	dgc.mutation.SetTodo(s)
	return dgc
}

// SetDone sets the "done" field.
func (dgc *DailyGaolCreate) SetDone(b bool) *DailyGaolCreate {
	dgc.mutation.SetDone(b)
	return dgc
}

// SetNillableDone sets the "done" field if the given value is not nil.
func (dgc *DailyGaolCreate) SetNillableDone(b *bool) *DailyGaolCreate {
	if b != nil {
		dgc.SetDone(*b)
	}
	return dgc
}

// SetIsRemoved sets the "is_removed" field.
func (dgc *DailyGaolCreate) SetIsRemoved(b bool) *DailyGaolCreate {
	dgc.mutation.SetIsRemoved(b)
	return dgc
}

// SetNillableIsRemoved sets the "is_removed" field if the given value is not nil.
func (dgc *DailyGaolCreate) SetNillableIsRemoved(b *bool) *DailyGaolCreate {
	if b != nil {
		dgc.SetIsRemoved(*b)
	}
	return dgc
}

// SetStudyID sets the "study" edge to the Study entity by ID.
func (dgc *DailyGaolCreate) SetStudyID(id int) *DailyGaolCreate {
	dgc.mutation.SetStudyID(id)
	return dgc
}

// SetNillableStudyID sets the "study" edge to the Study entity by ID if the given value is not nil.
func (dgc *DailyGaolCreate) SetNillableStudyID(id *int) *DailyGaolCreate {
	if id != nil {
		dgc = dgc.SetStudyID(*id)
	}
	return dgc
}

// SetStudy sets the "study" edge to the Study entity.
func (dgc *DailyGaolCreate) SetStudy(s *Study) *DailyGaolCreate {
	return dgc.SetStudyID(s.ID)
}

// SetWgoalID sets the "wgoal" edge to the WeeklyGaol entity by ID.
func (dgc *DailyGaolCreate) SetWgoalID(id int) *DailyGaolCreate {
	dgc.mutation.SetWgoalID(id)
	return dgc
}

// SetNillableWgoalID sets the "wgoal" edge to the WeeklyGaol entity by ID if the given value is not nil.
func (dgc *DailyGaolCreate) SetNillableWgoalID(id *int) *DailyGaolCreate {
	if id != nil {
		dgc = dgc.SetWgoalID(*id)
	}
	return dgc
}

// SetWgoal sets the "wgoal" edge to the WeeklyGaol entity.
func (dgc *DailyGaolCreate) SetWgoal(w *WeeklyGaol) *DailyGaolCreate {
	return dgc.SetWgoalID(w.ID)
}

// Mutation returns the DailyGaolMutation object of the builder.
func (dgc *DailyGaolCreate) Mutation() *DailyGaolMutation {
	return dgc.mutation
}

// Save creates the DailyGaol in the database.
func (dgc *DailyGaolCreate) Save(ctx context.Context) (*DailyGaol, error) {
	var (
		err  error
		node *DailyGaol
	)
	dgc.defaults()
	if len(dgc.hooks) == 0 {
		if err = dgc.check(); err != nil {
			return nil, err
		}
		node, err = dgc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DailyGaolMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dgc.check(); err != nil {
				return nil, err
			}
			dgc.mutation = mutation
			if node, err = dgc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(dgc.hooks) - 1; i >= 0; i-- {
			if dgc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dgc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dgc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (dgc *DailyGaolCreate) SaveX(ctx context.Context) *DailyGaol {
	v, err := dgc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dgc *DailyGaolCreate) Exec(ctx context.Context) error {
	_, err := dgc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dgc *DailyGaolCreate) ExecX(ctx context.Context) {
	if err := dgc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dgc *DailyGaolCreate) defaults() {
	if _, ok := dgc.mutation.CreatedAt(); !ok {
		v := dailygaol.DefaultCreatedAt()
		dgc.mutation.SetCreatedAt(v)
	}
	if _, ok := dgc.mutation.UpdatedAt(); !ok {
		v := dailygaol.DefaultUpdatedAt()
		dgc.mutation.SetUpdatedAt(v)
	}
	if _, ok := dgc.mutation.Done(); !ok {
		v := dailygaol.DefaultDone
		dgc.mutation.SetDone(v)
	}
	if _, ok := dgc.mutation.IsRemoved(); !ok {
		v := dailygaol.DefaultIsRemoved
		dgc.mutation.SetIsRemoved(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dgc *DailyGaolCreate) check() error {
	if _, ok := dgc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := dgc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "updated_at"`)}
	}
	if _, ok := dgc.mutation.Todo(); !ok {
		return &ValidationError{Name: "todo", err: errors.New(`ent: missing required field "todo"`)}
	}
	if v, ok := dgc.mutation.Todo(); ok {
		if err := dailygaol.TodoValidator(v); err != nil {
			return &ValidationError{Name: "todo", err: fmt.Errorf(`ent: validator failed for field "todo": %w`, err)}
		}
	}
	if _, ok := dgc.mutation.Done(); !ok {
		return &ValidationError{Name: "done", err: errors.New(`ent: missing required field "done"`)}
	}
	if _, ok := dgc.mutation.IsRemoved(); !ok {
		return &ValidationError{Name: "is_removed", err: errors.New(`ent: missing required field "is_removed"`)}
	}
	return nil
}

func (dgc *DailyGaolCreate) sqlSave(ctx context.Context) (*DailyGaol, error) {
	_node, _spec := dgc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dgc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (dgc *DailyGaolCreate) createSpec() (*DailyGaol, *sqlgraph.CreateSpec) {
	var (
		_node = &DailyGaol{config: dgc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: dailygaol.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: dailygaol.FieldID,
			},
		}
	)
	if value, ok := dgc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: dailygaol.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := dgc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: dailygaol.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := dgc.mutation.Todo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dailygaol.FieldTodo,
		})
		_node.Todo = value
	}
	if value, ok := dgc.mutation.Done(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: dailygaol.FieldDone,
		})
		_node.Done = value
	}
	if value, ok := dgc.mutation.IsRemoved(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: dailygaol.FieldIsRemoved,
		})
		_node.IsRemoved = value
	}
	if nodes := dgc.mutation.StudyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dailygaol.StudyTable,
			Columns: []string{dailygaol.StudyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: study.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.study_dgoals = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dgc.mutation.WgoalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dailygaol.WgoalTable,
			Columns: []string{dailygaol.WgoalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: weeklygaol.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.weekly_gaol_dgaols = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DailyGaolCreateBulk is the builder for creating many DailyGaol entities in bulk.
type DailyGaolCreateBulk struct {
	config
	builders []*DailyGaolCreate
}

// Save creates the DailyGaol entities in the database.
func (dgcb *DailyGaolCreateBulk) Save(ctx context.Context) ([]*DailyGaol, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dgcb.builders))
	nodes := make([]*DailyGaol, len(dgcb.builders))
	mutators := make([]Mutator, len(dgcb.builders))
	for i := range dgcb.builders {
		func(i int, root context.Context) {
			builder := dgcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DailyGaolMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dgcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dgcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dgcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dgcb *DailyGaolCreateBulk) SaveX(ctx context.Context) []*DailyGaol {
	v, err := dgcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dgcb *DailyGaolCreateBulk) Exec(ctx context.Context) error {
	_, err := dgcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dgcb *DailyGaolCreateBulk) ExecX(ctx context.Context) {
	if err := dgcb.Exec(ctx); err != nil {
		panic(err)
	}
}
