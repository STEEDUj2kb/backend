// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/STEEDUj2kb/platform/ent/study"
	"github.com/STEEDUj2kb/platform/ent/user"
)

// Study is the model entity for the Study schema.
type Study struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// StartedAt holds the value of the "started_at" field.
	StartedAt time.Time `json:"started_at,omitempty"`
	// EndedAt holds the value of the "ended_at" field.
	EndedAt time.Time `json:"ended_at,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StudyQuery when eager-loading is set.
	Edges        StudyEdges `json:"edges"`
	user_studies *int
}

// StudyEdges holds the relations/edges for other nodes in the graph.
type StudyEdges struct {
	// Planner holds the value of the planner edge.
	Planner *User `json:"planner,omitempty"`
	// Dgoals holds the value of the dgoals edge.
	Dgoals []*Daily_Gaol `json:"dgoals,omitempty"`
	// Wgoals holds the value of the wgoals edge.
	Wgoals []*Weekly_Gaol `json:"wgoals,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// PlannerOrErr returns the Planner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StudyEdges) PlannerOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Planner == nil {
			// The edge planner was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Planner, nil
	}
	return nil, &NotLoadedError{edge: "planner"}
}

// DgoalsOrErr returns the Dgoals value or an error if the edge
// was not loaded in eager-loading.
func (e StudyEdges) DgoalsOrErr() ([]*Daily_Gaol, error) {
	if e.loadedTypes[1] {
		return e.Dgoals, nil
	}
	return nil, &NotLoadedError{edge: "dgoals"}
}

// WgoalsOrErr returns the Wgoals value or an error if the edge
// was not loaded in eager-loading.
func (e StudyEdges) WgoalsOrErr() ([]*Weekly_Gaol, error) {
	if e.loadedTypes[2] {
		return e.Wgoals, nil
	}
	return nil, &NotLoadedError{edge: "wgoals"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Study) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case study.FieldID:
			values[i] = new(sql.NullInt64)
		case study.FieldContent:
			values[i] = new(sql.NullString)
		case study.FieldStartedAt, study.FieldEndedAt:
			values[i] = new(sql.NullTime)
		case study.ForeignKeys[0]: // user_studies
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Study", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Study fields.
func (s *Study) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case study.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case study.FieldStartedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field started_at", values[i])
			} else if value.Valid {
				s.StartedAt = value.Time
			}
		case study.FieldEndedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field ended_at", values[i])
			} else if value.Valid {
				s.EndedAt = value.Time
			}
		case study.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				s.Content = value.String
			}
		case study.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_studies", value)
			} else if value.Valid {
				s.user_studies = new(int)
				*s.user_studies = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryPlanner queries the "planner" edge of the Study entity.
func (s *Study) QueryPlanner() *UserQuery {
	return (&StudyClient{config: s.config}).QueryPlanner(s)
}

// QueryDgoals queries the "dgoals" edge of the Study entity.
func (s *Study) QueryDgoals() *DailyGaolQuery {
	return (&StudyClient{config: s.config}).QueryDgoals(s)
}

// QueryWgoals queries the "wgoals" edge of the Study entity.
func (s *Study) QueryWgoals() *WeeklyGaolQuery {
	return (&StudyClient{config: s.config}).QueryWgoals(s)
}

// Update returns a builder for updating this Study.
// Note that you need to call Study.Unwrap() before calling this method if this Study
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Study) Update() *StudyUpdateOne {
	return (&StudyClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the Study entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Study) Unwrap() *Study {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Study is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Study) String() string {
	var builder strings.Builder
	builder.WriteString("Study(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", started_at=")
	builder.WriteString(s.StartedAt.Format(time.ANSIC))
	builder.WriteString(", ended_at=")
	builder.WriteString(s.EndedAt.Format(time.ANSIC))
	builder.WriteString(", content=")
	builder.WriteString(s.Content)
	builder.WriteByte(')')
	return builder.String()
}

// Studies is a parsable slice of Study.
type Studies []*Study

func (s Studies) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
