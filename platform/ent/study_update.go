// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/STEEDUj2kb/platform/ent/dailygaol"
	"github.com/STEEDUj2kb/platform/ent/predicate"
	"github.com/STEEDUj2kb/platform/ent/study"
	"github.com/STEEDUj2kb/platform/ent/user"
	"github.com/STEEDUj2kb/platform/ent/weeklygaol"
)

// StudyUpdate is the builder for updating Study entities.
type StudyUpdate struct {
	config
	hooks    []Hook
	mutation *StudyMutation
}

// Where appends a list predicates to the StudyUpdate builder.
func (su *StudyUpdate) Where(ps ...predicate.Study) *StudyUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetEndedAt sets the "ended_at" field.
func (su *StudyUpdate) SetEndedAt(t time.Time) *StudyUpdate {
	su.mutation.SetEndedAt(t)
	return su
}

// SetNillableEndedAt sets the "ended_at" field if the given value is not nil.
func (su *StudyUpdate) SetNillableEndedAt(t *time.Time) *StudyUpdate {
	if t != nil {
		su.SetEndedAt(*t)
	}
	return su
}

// ClearEndedAt clears the value of the "ended_at" field.
func (su *StudyUpdate) ClearEndedAt() *StudyUpdate {
	su.mutation.ClearEndedAt()
	return su
}

// SetContent sets the "content" field.
func (su *StudyUpdate) SetContent(s string) *StudyUpdate {
	su.mutation.SetContent(s)
	return su
}

// SetPlannerID sets the "planner" edge to the User entity by ID.
func (su *StudyUpdate) SetPlannerID(id int) *StudyUpdate {
	su.mutation.SetPlannerID(id)
	return su
}

// SetNillablePlannerID sets the "planner" edge to the User entity by ID if the given value is not nil.
func (su *StudyUpdate) SetNillablePlannerID(id *int) *StudyUpdate {
	if id != nil {
		su = su.SetPlannerID(*id)
	}
	return su
}

// SetPlanner sets the "planner" edge to the User entity.
func (su *StudyUpdate) SetPlanner(u *User) *StudyUpdate {
	return su.SetPlannerID(u.ID)
}

// AddDgoalIDs adds the "dgoals" edge to the DailyGaol entity by IDs.
func (su *StudyUpdate) AddDgoalIDs(ids ...int) *StudyUpdate {
	su.mutation.AddDgoalIDs(ids...)
	return su
}

// AddDgoals adds the "dgoals" edges to the DailyGaol entity.
func (su *StudyUpdate) AddDgoals(d ...*DailyGaol) *StudyUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return su.AddDgoalIDs(ids...)
}

// AddWgoalIDs adds the "wgoals" edge to the WeeklyGaol entity by IDs.
func (su *StudyUpdate) AddWgoalIDs(ids ...int) *StudyUpdate {
	su.mutation.AddWgoalIDs(ids...)
	return su
}

// AddWgoals adds the "wgoals" edges to the WeeklyGaol entity.
func (su *StudyUpdate) AddWgoals(w ...*WeeklyGaol) *StudyUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return su.AddWgoalIDs(ids...)
}

// Mutation returns the StudyMutation object of the builder.
func (su *StudyUpdate) Mutation() *StudyMutation {
	return su.mutation
}

// ClearPlanner clears the "planner" edge to the User entity.
func (su *StudyUpdate) ClearPlanner() *StudyUpdate {
	su.mutation.ClearPlanner()
	return su
}

// ClearDgoals clears all "dgoals" edges to the DailyGaol entity.
func (su *StudyUpdate) ClearDgoals() *StudyUpdate {
	su.mutation.ClearDgoals()
	return su
}

// RemoveDgoalIDs removes the "dgoals" edge to DailyGaol entities by IDs.
func (su *StudyUpdate) RemoveDgoalIDs(ids ...int) *StudyUpdate {
	su.mutation.RemoveDgoalIDs(ids...)
	return su
}

// RemoveDgoals removes "dgoals" edges to DailyGaol entities.
func (su *StudyUpdate) RemoveDgoals(d ...*DailyGaol) *StudyUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return su.RemoveDgoalIDs(ids...)
}

// ClearWgoals clears all "wgoals" edges to the WeeklyGaol entity.
func (su *StudyUpdate) ClearWgoals() *StudyUpdate {
	su.mutation.ClearWgoals()
	return su
}

// RemoveWgoalIDs removes the "wgoals" edge to WeeklyGaol entities by IDs.
func (su *StudyUpdate) RemoveWgoalIDs(ids ...int) *StudyUpdate {
	su.mutation.RemoveWgoalIDs(ids...)
	return su
}

// RemoveWgoals removes "wgoals" edges to WeeklyGaol entities.
func (su *StudyUpdate) RemoveWgoals(w ...*WeeklyGaol) *StudyUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return su.RemoveWgoalIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *StudyUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(su.hooks) == 0 {
		if err = su.check(); err != nil {
			return 0, err
		}
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StudyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = su.check(); err != nil {
				return 0, err
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			if su.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *StudyUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *StudyUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *StudyUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *StudyUpdate) check() error {
	if v, ok := su.mutation.Content(); ok {
		if err := study.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf("ent: validator failed for field \"content\": %w", err)}
		}
	}
	return nil
}

func (su *StudyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   study.Table,
			Columns: study.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: study.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.EndedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: study.FieldEndedAt,
		})
	}
	if su.mutation.EndedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: study.FieldEndedAt,
		})
	}
	if value, ok := su.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: study.FieldContent,
		})
	}
	if su.mutation.PlannerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   study.PlannerTable,
			Columns: []string{study.PlannerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.PlannerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   study.PlannerTable,
			Columns: []string{study.PlannerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.DgoalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   study.DgoalsTable,
			Columns: []string{study.DgoalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dailygaol.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedDgoalsIDs(); len(nodes) > 0 && !su.mutation.DgoalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   study.DgoalsTable,
			Columns: []string{study.DgoalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dailygaol.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.DgoalsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   study.DgoalsTable,
			Columns: []string{study.DgoalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dailygaol.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.WgoalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   study.WgoalsTable,
			Columns: []string{study.WgoalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: weeklygaol.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedWgoalsIDs(); len(nodes) > 0 && !su.mutation.WgoalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   study.WgoalsTable,
			Columns: []string{study.WgoalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: weeklygaol.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.WgoalsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   study.WgoalsTable,
			Columns: []string{study.WgoalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: weeklygaol.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{study.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// StudyUpdateOne is the builder for updating a single Study entity.
type StudyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StudyMutation
}

// SetEndedAt sets the "ended_at" field.
func (suo *StudyUpdateOne) SetEndedAt(t time.Time) *StudyUpdateOne {
	suo.mutation.SetEndedAt(t)
	return suo
}

// SetNillableEndedAt sets the "ended_at" field if the given value is not nil.
func (suo *StudyUpdateOne) SetNillableEndedAt(t *time.Time) *StudyUpdateOne {
	if t != nil {
		suo.SetEndedAt(*t)
	}
	return suo
}

// ClearEndedAt clears the value of the "ended_at" field.
func (suo *StudyUpdateOne) ClearEndedAt() *StudyUpdateOne {
	suo.mutation.ClearEndedAt()
	return suo
}

// SetContent sets the "content" field.
func (suo *StudyUpdateOne) SetContent(s string) *StudyUpdateOne {
	suo.mutation.SetContent(s)
	return suo
}

// SetPlannerID sets the "planner" edge to the User entity by ID.
func (suo *StudyUpdateOne) SetPlannerID(id int) *StudyUpdateOne {
	suo.mutation.SetPlannerID(id)
	return suo
}

// SetNillablePlannerID sets the "planner" edge to the User entity by ID if the given value is not nil.
func (suo *StudyUpdateOne) SetNillablePlannerID(id *int) *StudyUpdateOne {
	if id != nil {
		suo = suo.SetPlannerID(*id)
	}
	return suo
}

// SetPlanner sets the "planner" edge to the User entity.
func (suo *StudyUpdateOne) SetPlanner(u *User) *StudyUpdateOne {
	return suo.SetPlannerID(u.ID)
}

// AddDgoalIDs adds the "dgoals" edge to the DailyGaol entity by IDs.
func (suo *StudyUpdateOne) AddDgoalIDs(ids ...int) *StudyUpdateOne {
	suo.mutation.AddDgoalIDs(ids...)
	return suo
}

// AddDgoals adds the "dgoals" edges to the DailyGaol entity.
func (suo *StudyUpdateOne) AddDgoals(d ...*DailyGaol) *StudyUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return suo.AddDgoalIDs(ids...)
}

// AddWgoalIDs adds the "wgoals" edge to the WeeklyGaol entity by IDs.
func (suo *StudyUpdateOne) AddWgoalIDs(ids ...int) *StudyUpdateOne {
	suo.mutation.AddWgoalIDs(ids...)
	return suo
}

// AddWgoals adds the "wgoals" edges to the WeeklyGaol entity.
func (suo *StudyUpdateOne) AddWgoals(w ...*WeeklyGaol) *StudyUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return suo.AddWgoalIDs(ids...)
}

// Mutation returns the StudyMutation object of the builder.
func (suo *StudyUpdateOne) Mutation() *StudyMutation {
	return suo.mutation
}

// ClearPlanner clears the "planner" edge to the User entity.
func (suo *StudyUpdateOne) ClearPlanner() *StudyUpdateOne {
	suo.mutation.ClearPlanner()
	return suo
}

// ClearDgoals clears all "dgoals" edges to the DailyGaol entity.
func (suo *StudyUpdateOne) ClearDgoals() *StudyUpdateOne {
	suo.mutation.ClearDgoals()
	return suo
}

// RemoveDgoalIDs removes the "dgoals" edge to DailyGaol entities by IDs.
func (suo *StudyUpdateOne) RemoveDgoalIDs(ids ...int) *StudyUpdateOne {
	suo.mutation.RemoveDgoalIDs(ids...)
	return suo
}

// RemoveDgoals removes "dgoals" edges to DailyGaol entities.
func (suo *StudyUpdateOne) RemoveDgoals(d ...*DailyGaol) *StudyUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return suo.RemoveDgoalIDs(ids...)
}

// ClearWgoals clears all "wgoals" edges to the WeeklyGaol entity.
func (suo *StudyUpdateOne) ClearWgoals() *StudyUpdateOne {
	suo.mutation.ClearWgoals()
	return suo
}

// RemoveWgoalIDs removes the "wgoals" edge to WeeklyGaol entities by IDs.
func (suo *StudyUpdateOne) RemoveWgoalIDs(ids ...int) *StudyUpdateOne {
	suo.mutation.RemoveWgoalIDs(ids...)
	return suo
}

// RemoveWgoals removes "wgoals" edges to WeeklyGaol entities.
func (suo *StudyUpdateOne) RemoveWgoals(w ...*WeeklyGaol) *StudyUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return suo.RemoveWgoalIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *StudyUpdateOne) Select(field string, fields ...string) *StudyUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Study entity.
func (suo *StudyUpdateOne) Save(ctx context.Context) (*Study, error) {
	var (
		err  error
		node *Study
	)
	if len(suo.hooks) == 0 {
		if err = suo.check(); err != nil {
			return nil, err
		}
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StudyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = suo.check(); err != nil {
				return nil, err
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			if suo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = suo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, suo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *StudyUpdateOne) SaveX(ctx context.Context) *Study {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *StudyUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *StudyUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *StudyUpdateOne) check() error {
	if v, ok := suo.mutation.Content(); ok {
		if err := study.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf("ent: validator failed for field \"content\": %w", err)}
		}
	}
	return nil
}

func (suo *StudyUpdateOne) sqlSave(ctx context.Context) (_node *Study, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   study.Table,
			Columns: study.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: study.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Study.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, study.FieldID)
		for _, f := range fields {
			if !study.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != study.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.EndedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: study.FieldEndedAt,
		})
	}
	if suo.mutation.EndedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: study.FieldEndedAt,
		})
	}
	if value, ok := suo.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: study.FieldContent,
		})
	}
	if suo.mutation.PlannerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   study.PlannerTable,
			Columns: []string{study.PlannerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.PlannerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   study.PlannerTable,
			Columns: []string{study.PlannerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.DgoalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   study.DgoalsTable,
			Columns: []string{study.DgoalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dailygaol.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedDgoalsIDs(); len(nodes) > 0 && !suo.mutation.DgoalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   study.DgoalsTable,
			Columns: []string{study.DgoalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dailygaol.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.DgoalsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   study.DgoalsTable,
			Columns: []string{study.DgoalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dailygaol.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.WgoalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   study.WgoalsTable,
			Columns: []string{study.WgoalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: weeklygaol.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedWgoalsIDs(); len(nodes) > 0 && !suo.mutation.WgoalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   study.WgoalsTable,
			Columns: []string{study.WgoalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: weeklygaol.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.WgoalsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   study.WgoalsTable,
			Columns: []string{study.WgoalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: weeklygaol.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Study{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{study.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
