// Code generated by entc, DO NOT EDIT.

package weekly_gaol

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/STEEDUj2kb/platform/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Weekly_Gaol {
	return predicate.Weekly_Gaol(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Weekly_Gaol {
	return predicate.Weekly_Gaol(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Weekly_Gaol {
	return predicate.Weekly_Gaol(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Weekly_Gaol {
	return predicate.Weekly_Gaol(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Weekly_Gaol {
	return predicate.Weekly_Gaol(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Weekly_Gaol {
	return predicate.Weekly_Gaol(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Weekly_Gaol {
	return predicate.Weekly_Gaol(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Weekly_Gaol {
	return predicate.Weekly_Gaol(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Weekly_Gaol {
	return predicate.Weekly_Gaol(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Goal applies equality check predicate on the "goal" field. It's identical to GoalEQ.
func Goal(v string) predicate.Weekly_Gaol {
	return predicate.Weekly_Gaol(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGoal), v))
	})
}

// Score applies equality check predicate on the "score" field. It's identical to ScoreEQ.
func Score(v int) predicate.Weekly_Gaol {
	return predicate.Weekly_Gaol(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldScore), v))
	})
}

// Nth applies equality check predicate on the "nth" field. It's identical to NthEQ.
func Nth(v int) predicate.Weekly_Gaol {
	return predicate.Weekly_Gaol(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNth), v))
	})
}

// GoalEQ applies the EQ predicate on the "goal" field.
func GoalEQ(v string) predicate.Weekly_Gaol {
	return predicate.Weekly_Gaol(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGoal), v))
	})
}

// GoalNEQ applies the NEQ predicate on the "goal" field.
func GoalNEQ(v string) predicate.Weekly_Gaol {
	return predicate.Weekly_Gaol(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGoal), v))
	})
}

// GoalIn applies the In predicate on the "goal" field.
func GoalIn(vs ...string) predicate.Weekly_Gaol {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Weekly_Gaol(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldGoal), v...))
	})
}

// GoalNotIn applies the NotIn predicate on the "goal" field.
func GoalNotIn(vs ...string) predicate.Weekly_Gaol {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Weekly_Gaol(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldGoal), v...))
	})
}

// GoalGT applies the GT predicate on the "goal" field.
func GoalGT(v string) predicate.Weekly_Gaol {
	return predicate.Weekly_Gaol(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGoal), v))
	})
}

// GoalGTE applies the GTE predicate on the "goal" field.
func GoalGTE(v string) predicate.Weekly_Gaol {
	return predicate.Weekly_Gaol(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGoal), v))
	})
}

// GoalLT applies the LT predicate on the "goal" field.
func GoalLT(v string) predicate.Weekly_Gaol {
	return predicate.Weekly_Gaol(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGoal), v))
	})
}

// GoalLTE applies the LTE predicate on the "goal" field.
func GoalLTE(v string) predicate.Weekly_Gaol {
	return predicate.Weekly_Gaol(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGoal), v))
	})
}

// GoalContains applies the Contains predicate on the "goal" field.
func GoalContains(v string) predicate.Weekly_Gaol {
	return predicate.Weekly_Gaol(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldGoal), v))
	})
}

// GoalHasPrefix applies the HasPrefix predicate on the "goal" field.
func GoalHasPrefix(v string) predicate.Weekly_Gaol {
	return predicate.Weekly_Gaol(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldGoal), v))
	})
}

// GoalHasSuffix applies the HasSuffix predicate on the "goal" field.
func GoalHasSuffix(v string) predicate.Weekly_Gaol {
	return predicate.Weekly_Gaol(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldGoal), v))
	})
}

// GoalEqualFold applies the EqualFold predicate on the "goal" field.
func GoalEqualFold(v string) predicate.Weekly_Gaol {
	return predicate.Weekly_Gaol(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldGoal), v))
	})
}

// GoalContainsFold applies the ContainsFold predicate on the "goal" field.
func GoalContainsFold(v string) predicate.Weekly_Gaol {
	return predicate.Weekly_Gaol(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldGoal), v))
	})
}

// ScoreEQ applies the EQ predicate on the "score" field.
func ScoreEQ(v int) predicate.Weekly_Gaol {
	return predicate.Weekly_Gaol(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldScore), v))
	})
}

// ScoreNEQ applies the NEQ predicate on the "score" field.
func ScoreNEQ(v int) predicate.Weekly_Gaol {
	return predicate.Weekly_Gaol(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldScore), v))
	})
}

// ScoreIn applies the In predicate on the "score" field.
func ScoreIn(vs ...int) predicate.Weekly_Gaol {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Weekly_Gaol(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldScore), v...))
	})
}

// ScoreNotIn applies the NotIn predicate on the "score" field.
func ScoreNotIn(vs ...int) predicate.Weekly_Gaol {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Weekly_Gaol(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldScore), v...))
	})
}

// ScoreGT applies the GT predicate on the "score" field.
func ScoreGT(v int) predicate.Weekly_Gaol {
	return predicate.Weekly_Gaol(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldScore), v))
	})
}

// ScoreGTE applies the GTE predicate on the "score" field.
func ScoreGTE(v int) predicate.Weekly_Gaol {
	return predicate.Weekly_Gaol(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldScore), v))
	})
}

// ScoreLT applies the LT predicate on the "score" field.
func ScoreLT(v int) predicate.Weekly_Gaol {
	return predicate.Weekly_Gaol(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldScore), v))
	})
}

// ScoreLTE applies the LTE predicate on the "score" field.
func ScoreLTE(v int) predicate.Weekly_Gaol {
	return predicate.Weekly_Gaol(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldScore), v))
	})
}

// NthEQ applies the EQ predicate on the "nth" field.
func NthEQ(v int) predicate.Weekly_Gaol {
	return predicate.Weekly_Gaol(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNth), v))
	})
}

// NthNEQ applies the NEQ predicate on the "nth" field.
func NthNEQ(v int) predicate.Weekly_Gaol {
	return predicate.Weekly_Gaol(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNth), v))
	})
}

// NthIn applies the In predicate on the "nth" field.
func NthIn(vs ...int) predicate.Weekly_Gaol {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Weekly_Gaol(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNth), v...))
	})
}

// NthNotIn applies the NotIn predicate on the "nth" field.
func NthNotIn(vs ...int) predicate.Weekly_Gaol {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Weekly_Gaol(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNth), v...))
	})
}

// NthGT applies the GT predicate on the "nth" field.
func NthGT(v int) predicate.Weekly_Gaol {
	return predicate.Weekly_Gaol(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNth), v))
	})
}

// NthGTE applies the GTE predicate on the "nth" field.
func NthGTE(v int) predicate.Weekly_Gaol {
	return predicate.Weekly_Gaol(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNth), v))
	})
}

// NthLT applies the LT predicate on the "nth" field.
func NthLT(v int) predicate.Weekly_Gaol {
	return predicate.Weekly_Gaol(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNth), v))
	})
}

// NthLTE applies the LTE predicate on the "nth" field.
func NthLTE(v int) predicate.Weekly_Gaol {
	return predicate.Weekly_Gaol(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNth), v))
	})
}

// HasDgaols applies the HasEdge predicate on the "dgaols" edge.
func HasDgaols() predicate.Weekly_Gaol {
	return predicate.Weekly_Gaol(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DgaolsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DgaolsTable, DgaolsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDgaolsWith applies the HasEdge predicate on the "dgaols" edge with a given conditions (other predicates).
func HasDgaolsWith(preds ...predicate.Daily_Gaol) predicate.Weekly_Gaol {
	return predicate.Weekly_Gaol(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DgaolsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DgaolsTable, DgaolsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStudy applies the HasEdge predicate on the "study" edge.
func HasStudy() predicate.Weekly_Gaol {
	return predicate.Weekly_Gaol(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StudyTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StudyTable, StudyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStudyWith applies the HasEdge predicate on the "study" edge with a given conditions (other predicates).
func HasStudyWith(preds ...predicate.Study) predicate.Weekly_Gaol {
	return predicate.Weekly_Gaol(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StudyInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StudyTable, StudyColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Weekly_Gaol) predicate.Weekly_Gaol {
	return predicate.Weekly_Gaol(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Weekly_Gaol) predicate.Weekly_Gaol {
	return predicate.Weekly_Gaol(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Weekly_Gaol) predicate.Weekly_Gaol {
	return predicate.Weekly_Gaol(func(s *sql.Selector) {
		p(s.Not())
	})
}
