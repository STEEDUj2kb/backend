// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/STEEDUj2kb/platform/ent/study"
	"github.com/STEEDUj2kb/platform/ent/weeklygaol"
)

// WeeklyGaol is the model entity for the WeeklyGaol schema.
type WeeklyGaol struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Goal holds the value of the "goal" field.
	Goal string `json:"goal,omitempty"`
	// Score holds the value of the "score" field.
	Score int `json:"score,omitempty"`
	// Nth holds the value of the "nth" field.
	Nth int `json:"nth,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WeeklyGaolQuery when eager-loading is set.
	Edges        WeeklyGaolEdges `json:"edges"`
	study_wgoals *int
}

// WeeklyGaolEdges holds the relations/edges for other nodes in the graph.
type WeeklyGaolEdges struct {
	// Dgaols holds the value of the dgaols edge.
	Dgaols []*DailyGaol `json:"dgaols,omitempty"`
	// Study holds the value of the study edge.
	Study *Study `json:"study,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// DgaolsOrErr returns the Dgaols value or an error if the edge
// was not loaded in eager-loading.
func (e WeeklyGaolEdges) DgaolsOrErr() ([]*DailyGaol, error) {
	if e.loadedTypes[0] {
		return e.Dgaols, nil
	}
	return nil, &NotLoadedError{edge: "dgaols"}
}

// StudyOrErr returns the Study value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WeeklyGaolEdges) StudyOrErr() (*Study, error) {
	if e.loadedTypes[1] {
		if e.Study == nil {
			// The edge study was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: study.Label}
		}
		return e.Study, nil
	}
	return nil, &NotLoadedError{edge: "study"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WeeklyGaol) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case weeklygaol.FieldID, weeklygaol.FieldScore, weeklygaol.FieldNth:
			values[i] = new(sql.NullInt64)
		case weeklygaol.FieldGoal:
			values[i] = new(sql.NullString)
		case weeklygaol.ForeignKeys[0]: // study_wgoals
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type WeeklyGaol", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WeeklyGaol fields.
func (wg *WeeklyGaol) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case weeklygaol.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			wg.ID = int(value.Int64)
		case weeklygaol.FieldGoal:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field goal", values[i])
			} else if value.Valid {
				wg.Goal = value.String
			}
		case weeklygaol.FieldScore:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field score", values[i])
			} else if value.Valid {
				wg.Score = int(value.Int64)
			}
		case weeklygaol.FieldNth:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field nth", values[i])
			} else if value.Valid {
				wg.Nth = int(value.Int64)
			}
		case weeklygaol.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field study_wgoals", value)
			} else if value.Valid {
				wg.study_wgoals = new(int)
				*wg.study_wgoals = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryDgaols queries the "dgaols" edge of the WeeklyGaol entity.
func (wg *WeeklyGaol) QueryDgaols() *DailyGaolQuery {
	return (&WeeklyGaolClient{config: wg.config}).QueryDgaols(wg)
}

// QueryStudy queries the "study" edge of the WeeklyGaol entity.
func (wg *WeeklyGaol) QueryStudy() *StudyQuery {
	return (&WeeklyGaolClient{config: wg.config}).QueryStudy(wg)
}

// Update returns a builder for updating this WeeklyGaol.
// Note that you need to call WeeklyGaol.Unwrap() before calling this method if this WeeklyGaol
// was returned from a transaction, and the transaction was committed or rolled back.
func (wg *WeeklyGaol) Update() *WeeklyGaolUpdateOne {
	return (&WeeklyGaolClient{config: wg.config}).UpdateOne(wg)
}

// Unwrap unwraps the WeeklyGaol entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (wg *WeeklyGaol) Unwrap() *WeeklyGaol {
	tx, ok := wg.config.driver.(*txDriver)
	if !ok {
		panic("ent: WeeklyGaol is not a transactional entity")
	}
	wg.config.driver = tx.drv
	return wg
}

// String implements the fmt.Stringer.
func (wg *WeeklyGaol) String() string {
	var builder strings.Builder
	builder.WriteString("WeeklyGaol(")
	builder.WriteString(fmt.Sprintf("id=%v", wg.ID))
	builder.WriteString(", goal=")
	builder.WriteString(wg.Goal)
	builder.WriteString(", score=")
	builder.WriteString(fmt.Sprintf("%v", wg.Score))
	builder.WriteString(", nth=")
	builder.WriteString(fmt.Sprintf("%v", wg.Nth))
	builder.WriteByte(')')
	return builder.String()
}

// WeeklyGaols is a parsable slice of WeeklyGaol.
type WeeklyGaols []*WeeklyGaol

func (wg WeeklyGaols) config(cfg config) {
	for _i := range wg {
		wg[_i].config = cfg
	}
}
