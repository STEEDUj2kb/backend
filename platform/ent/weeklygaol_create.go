// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/STEEDUj2kb/platform/ent/dailygaol"
	"github.com/STEEDUj2kb/platform/ent/study"
	"github.com/STEEDUj2kb/platform/ent/weeklygaol"
)

// WeeklyGaolCreate is the builder for creating a WeeklyGaol entity.
type WeeklyGaolCreate struct {
	config
	mutation *WeeklyGaolMutation
	hooks    []Hook
}

// SetGoal sets the "goal" field.
func (wgc *WeeklyGaolCreate) SetGoal(s string) *WeeklyGaolCreate {
	wgc.mutation.SetGoal(s)
	return wgc
}

// SetScore sets the "score" field.
func (wgc *WeeklyGaolCreate) SetScore(i int) *WeeklyGaolCreate {
	wgc.mutation.SetScore(i)
	return wgc
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (wgc *WeeklyGaolCreate) SetNillableScore(i *int) *WeeklyGaolCreate {
	if i != nil {
		wgc.SetScore(*i)
	}
	return wgc
}

// SetNth sets the "nth" field.
func (wgc *WeeklyGaolCreate) SetNth(i int) *WeeklyGaolCreate {
	wgc.mutation.SetNth(i)
	return wgc
}

// AddDgaolIDs adds the "dgaols" edge to the DailyGaol entity by IDs.
func (wgc *WeeklyGaolCreate) AddDgaolIDs(ids ...int) *WeeklyGaolCreate {
	wgc.mutation.AddDgaolIDs(ids...)
	return wgc
}

// AddDgaols adds the "dgaols" edges to the DailyGaol entity.
func (wgc *WeeklyGaolCreate) AddDgaols(d ...*DailyGaol) *WeeklyGaolCreate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return wgc.AddDgaolIDs(ids...)
}

// SetStudyID sets the "study" edge to the Study entity by ID.
func (wgc *WeeklyGaolCreate) SetStudyID(id int) *WeeklyGaolCreate {
	wgc.mutation.SetStudyID(id)
	return wgc
}

// SetNillableStudyID sets the "study" edge to the Study entity by ID if the given value is not nil.
func (wgc *WeeklyGaolCreate) SetNillableStudyID(id *int) *WeeklyGaolCreate {
	if id != nil {
		wgc = wgc.SetStudyID(*id)
	}
	return wgc
}

// SetStudy sets the "study" edge to the Study entity.
func (wgc *WeeklyGaolCreate) SetStudy(s *Study) *WeeklyGaolCreate {
	return wgc.SetStudyID(s.ID)
}

// Mutation returns the WeeklyGaolMutation object of the builder.
func (wgc *WeeklyGaolCreate) Mutation() *WeeklyGaolMutation {
	return wgc.mutation
}

// Save creates the WeeklyGaol in the database.
func (wgc *WeeklyGaolCreate) Save(ctx context.Context) (*WeeklyGaol, error) {
	var (
		err  error
		node *WeeklyGaol
	)
	wgc.defaults()
	if len(wgc.hooks) == 0 {
		if err = wgc.check(); err != nil {
			return nil, err
		}
		node, err = wgc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WeeklyGaolMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = wgc.check(); err != nil {
				return nil, err
			}
			wgc.mutation = mutation
			if node, err = wgc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(wgc.hooks) - 1; i >= 0; i-- {
			if wgc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = wgc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wgc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (wgc *WeeklyGaolCreate) SaveX(ctx context.Context) *WeeklyGaol {
	v, err := wgc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wgc *WeeklyGaolCreate) Exec(ctx context.Context) error {
	_, err := wgc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wgc *WeeklyGaolCreate) ExecX(ctx context.Context) {
	if err := wgc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wgc *WeeklyGaolCreate) defaults() {
	if _, ok := wgc.mutation.Score(); !ok {
		v := weeklygaol.DefaultScore
		wgc.mutation.SetScore(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wgc *WeeklyGaolCreate) check() error {
	if _, ok := wgc.mutation.Goal(); !ok {
		return &ValidationError{Name: "goal", err: errors.New(`ent: missing required field "goal"`)}
	}
	if _, ok := wgc.mutation.Nth(); !ok {
		return &ValidationError{Name: "nth", err: errors.New(`ent: missing required field "nth"`)}
	}
	return nil
}

func (wgc *WeeklyGaolCreate) sqlSave(ctx context.Context) (*WeeklyGaol, error) {
	_node, _spec := wgc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wgc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (wgc *WeeklyGaolCreate) createSpec() (*WeeklyGaol, *sqlgraph.CreateSpec) {
	var (
		_node = &WeeklyGaol{config: wgc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: weeklygaol.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: weeklygaol.FieldID,
			},
		}
	)
	if value, ok := wgc.mutation.Goal(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: weeklygaol.FieldGoal,
		})
		_node.Goal = value
	}
	if value, ok := wgc.mutation.Score(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: weeklygaol.FieldScore,
		})
		_node.Score = value
	}
	if value, ok := wgc.mutation.Nth(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: weeklygaol.FieldNth,
		})
		_node.Nth = value
	}
	if nodes := wgc.mutation.DgaolsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   weeklygaol.DgaolsTable,
			Columns: []string{weeklygaol.DgaolsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dailygaol.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wgc.mutation.StudyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   weeklygaol.StudyTable,
			Columns: []string{weeklygaol.StudyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: study.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.study_wgoals = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// WeeklyGaolCreateBulk is the builder for creating many WeeklyGaol entities in bulk.
type WeeklyGaolCreateBulk struct {
	config
	builders []*WeeklyGaolCreate
}

// Save creates the WeeklyGaol entities in the database.
func (wgcb *WeeklyGaolCreateBulk) Save(ctx context.Context) ([]*WeeklyGaol, error) {
	specs := make([]*sqlgraph.CreateSpec, len(wgcb.builders))
	nodes := make([]*WeeklyGaol, len(wgcb.builders))
	mutators := make([]Mutator, len(wgcb.builders))
	for i := range wgcb.builders {
		func(i int, root context.Context) {
			builder := wgcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WeeklyGaolMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wgcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wgcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wgcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wgcb *WeeklyGaolCreateBulk) SaveX(ctx context.Context) []*WeeklyGaol {
	v, err := wgcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wgcb *WeeklyGaolCreateBulk) Exec(ctx context.Context) error {
	_, err := wgcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wgcb *WeeklyGaolCreateBulk) ExecX(ctx context.Context) {
	if err := wgcb.Exec(ctx); err != nil {
		panic(err)
	}
}
