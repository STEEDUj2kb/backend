// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/STEEDUj2kb/platform/ent/dailygaol"
	"github.com/STEEDUj2kb/platform/ent/predicate"
	"github.com/STEEDUj2kb/platform/ent/study"
	"github.com/STEEDUj2kb/platform/ent/weeklygaol"
)

// WeeklyGaolUpdate is the builder for updating WeeklyGaol entities.
type WeeklyGaolUpdate struct {
	config
	hooks    []Hook
	mutation *WeeklyGaolMutation
}

// Where appends a list predicates to the WeeklyGaolUpdate builder.
func (wgu *WeeklyGaolUpdate) Where(ps ...predicate.WeeklyGaol) *WeeklyGaolUpdate {
	wgu.mutation.Where(ps...)
	return wgu
}

// SetGoal sets the "goal" field.
func (wgu *WeeklyGaolUpdate) SetGoal(s string) *WeeklyGaolUpdate {
	wgu.mutation.SetGoal(s)
	return wgu
}

// SetScore sets the "score" field.
func (wgu *WeeklyGaolUpdate) SetScore(i int) *WeeklyGaolUpdate {
	wgu.mutation.ResetScore()
	wgu.mutation.SetScore(i)
	return wgu
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (wgu *WeeklyGaolUpdate) SetNillableScore(i *int) *WeeklyGaolUpdate {
	if i != nil {
		wgu.SetScore(*i)
	}
	return wgu
}

// AddScore adds i to the "score" field.
func (wgu *WeeklyGaolUpdate) AddScore(i int) *WeeklyGaolUpdate {
	wgu.mutation.AddScore(i)
	return wgu
}

// ClearScore clears the value of the "score" field.
func (wgu *WeeklyGaolUpdate) ClearScore() *WeeklyGaolUpdate {
	wgu.mutation.ClearScore()
	return wgu
}

// SetNth sets the "nth" field.
func (wgu *WeeklyGaolUpdate) SetNth(i int) *WeeklyGaolUpdate {
	wgu.mutation.ResetNth()
	wgu.mutation.SetNth(i)
	return wgu
}

// AddNth adds i to the "nth" field.
func (wgu *WeeklyGaolUpdate) AddNth(i int) *WeeklyGaolUpdate {
	wgu.mutation.AddNth(i)
	return wgu
}

// AddDgaolIDs adds the "dgaols" edge to the DailyGaol entity by IDs.
func (wgu *WeeklyGaolUpdate) AddDgaolIDs(ids ...int) *WeeklyGaolUpdate {
	wgu.mutation.AddDgaolIDs(ids...)
	return wgu
}

// AddDgaols adds the "dgaols" edges to the DailyGaol entity.
func (wgu *WeeklyGaolUpdate) AddDgaols(d ...*DailyGaol) *WeeklyGaolUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return wgu.AddDgaolIDs(ids...)
}

// SetStudyID sets the "study" edge to the Study entity by ID.
func (wgu *WeeklyGaolUpdate) SetStudyID(id int) *WeeklyGaolUpdate {
	wgu.mutation.SetStudyID(id)
	return wgu
}

// SetNillableStudyID sets the "study" edge to the Study entity by ID if the given value is not nil.
func (wgu *WeeklyGaolUpdate) SetNillableStudyID(id *int) *WeeklyGaolUpdate {
	if id != nil {
		wgu = wgu.SetStudyID(*id)
	}
	return wgu
}

// SetStudy sets the "study" edge to the Study entity.
func (wgu *WeeklyGaolUpdate) SetStudy(s *Study) *WeeklyGaolUpdate {
	return wgu.SetStudyID(s.ID)
}

// Mutation returns the WeeklyGaolMutation object of the builder.
func (wgu *WeeklyGaolUpdate) Mutation() *WeeklyGaolMutation {
	return wgu.mutation
}

// ClearDgaols clears all "dgaols" edges to the DailyGaol entity.
func (wgu *WeeklyGaolUpdate) ClearDgaols() *WeeklyGaolUpdate {
	wgu.mutation.ClearDgaols()
	return wgu
}

// RemoveDgaolIDs removes the "dgaols" edge to DailyGaol entities by IDs.
func (wgu *WeeklyGaolUpdate) RemoveDgaolIDs(ids ...int) *WeeklyGaolUpdate {
	wgu.mutation.RemoveDgaolIDs(ids...)
	return wgu
}

// RemoveDgaols removes "dgaols" edges to DailyGaol entities.
func (wgu *WeeklyGaolUpdate) RemoveDgaols(d ...*DailyGaol) *WeeklyGaolUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return wgu.RemoveDgaolIDs(ids...)
}

// ClearStudy clears the "study" edge to the Study entity.
func (wgu *WeeklyGaolUpdate) ClearStudy() *WeeklyGaolUpdate {
	wgu.mutation.ClearStudy()
	return wgu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wgu *WeeklyGaolUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(wgu.hooks) == 0 {
		affected, err = wgu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WeeklyGaolMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			wgu.mutation = mutation
			affected, err = wgu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(wgu.hooks) - 1; i >= 0; i-- {
			if wgu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = wgu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wgu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (wgu *WeeklyGaolUpdate) SaveX(ctx context.Context) int {
	affected, err := wgu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wgu *WeeklyGaolUpdate) Exec(ctx context.Context) error {
	_, err := wgu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wgu *WeeklyGaolUpdate) ExecX(ctx context.Context) {
	if err := wgu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wgu *WeeklyGaolUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   weeklygaol.Table,
			Columns: weeklygaol.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: weeklygaol.FieldID,
			},
		},
	}
	if ps := wgu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wgu.mutation.Goal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: weeklygaol.FieldGoal,
		})
	}
	if value, ok := wgu.mutation.Score(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: weeklygaol.FieldScore,
		})
	}
	if value, ok := wgu.mutation.AddedScore(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: weeklygaol.FieldScore,
		})
	}
	if wgu.mutation.ScoreCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: weeklygaol.FieldScore,
		})
	}
	if value, ok := wgu.mutation.Nth(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: weeklygaol.FieldNth,
		})
	}
	if value, ok := wgu.mutation.AddedNth(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: weeklygaol.FieldNth,
		})
	}
	if wgu.mutation.DgaolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   weeklygaol.DgaolsTable,
			Columns: []string{weeklygaol.DgaolsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dailygaol.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wgu.mutation.RemovedDgaolsIDs(); len(nodes) > 0 && !wgu.mutation.DgaolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   weeklygaol.DgaolsTable,
			Columns: []string{weeklygaol.DgaolsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dailygaol.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wgu.mutation.DgaolsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   weeklygaol.DgaolsTable,
			Columns: []string{weeklygaol.DgaolsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dailygaol.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wgu.mutation.StudyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   weeklygaol.StudyTable,
			Columns: []string{weeklygaol.StudyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: study.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wgu.mutation.StudyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   weeklygaol.StudyTable,
			Columns: []string{weeklygaol.StudyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: study.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wgu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{weeklygaol.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// WeeklyGaolUpdateOne is the builder for updating a single WeeklyGaol entity.
type WeeklyGaolUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WeeklyGaolMutation
}

// SetGoal sets the "goal" field.
func (wguo *WeeklyGaolUpdateOne) SetGoal(s string) *WeeklyGaolUpdateOne {
	wguo.mutation.SetGoal(s)
	return wguo
}

// SetScore sets the "score" field.
func (wguo *WeeklyGaolUpdateOne) SetScore(i int) *WeeklyGaolUpdateOne {
	wguo.mutation.ResetScore()
	wguo.mutation.SetScore(i)
	return wguo
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (wguo *WeeklyGaolUpdateOne) SetNillableScore(i *int) *WeeklyGaolUpdateOne {
	if i != nil {
		wguo.SetScore(*i)
	}
	return wguo
}

// AddScore adds i to the "score" field.
func (wguo *WeeklyGaolUpdateOne) AddScore(i int) *WeeklyGaolUpdateOne {
	wguo.mutation.AddScore(i)
	return wguo
}

// ClearScore clears the value of the "score" field.
func (wguo *WeeklyGaolUpdateOne) ClearScore() *WeeklyGaolUpdateOne {
	wguo.mutation.ClearScore()
	return wguo
}

// SetNth sets the "nth" field.
func (wguo *WeeklyGaolUpdateOne) SetNth(i int) *WeeklyGaolUpdateOne {
	wguo.mutation.ResetNth()
	wguo.mutation.SetNth(i)
	return wguo
}

// AddNth adds i to the "nth" field.
func (wguo *WeeklyGaolUpdateOne) AddNth(i int) *WeeklyGaolUpdateOne {
	wguo.mutation.AddNth(i)
	return wguo
}

// AddDgaolIDs adds the "dgaols" edge to the DailyGaol entity by IDs.
func (wguo *WeeklyGaolUpdateOne) AddDgaolIDs(ids ...int) *WeeklyGaolUpdateOne {
	wguo.mutation.AddDgaolIDs(ids...)
	return wguo
}

// AddDgaols adds the "dgaols" edges to the DailyGaol entity.
func (wguo *WeeklyGaolUpdateOne) AddDgaols(d ...*DailyGaol) *WeeklyGaolUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return wguo.AddDgaolIDs(ids...)
}

// SetStudyID sets the "study" edge to the Study entity by ID.
func (wguo *WeeklyGaolUpdateOne) SetStudyID(id int) *WeeklyGaolUpdateOne {
	wguo.mutation.SetStudyID(id)
	return wguo
}

// SetNillableStudyID sets the "study" edge to the Study entity by ID if the given value is not nil.
func (wguo *WeeklyGaolUpdateOne) SetNillableStudyID(id *int) *WeeklyGaolUpdateOne {
	if id != nil {
		wguo = wguo.SetStudyID(*id)
	}
	return wguo
}

// SetStudy sets the "study" edge to the Study entity.
func (wguo *WeeklyGaolUpdateOne) SetStudy(s *Study) *WeeklyGaolUpdateOne {
	return wguo.SetStudyID(s.ID)
}

// Mutation returns the WeeklyGaolMutation object of the builder.
func (wguo *WeeklyGaolUpdateOne) Mutation() *WeeklyGaolMutation {
	return wguo.mutation
}

// ClearDgaols clears all "dgaols" edges to the DailyGaol entity.
func (wguo *WeeklyGaolUpdateOne) ClearDgaols() *WeeklyGaolUpdateOne {
	wguo.mutation.ClearDgaols()
	return wguo
}

// RemoveDgaolIDs removes the "dgaols" edge to DailyGaol entities by IDs.
func (wguo *WeeklyGaolUpdateOne) RemoveDgaolIDs(ids ...int) *WeeklyGaolUpdateOne {
	wguo.mutation.RemoveDgaolIDs(ids...)
	return wguo
}

// RemoveDgaols removes "dgaols" edges to DailyGaol entities.
func (wguo *WeeklyGaolUpdateOne) RemoveDgaols(d ...*DailyGaol) *WeeklyGaolUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return wguo.RemoveDgaolIDs(ids...)
}

// ClearStudy clears the "study" edge to the Study entity.
func (wguo *WeeklyGaolUpdateOne) ClearStudy() *WeeklyGaolUpdateOne {
	wguo.mutation.ClearStudy()
	return wguo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wguo *WeeklyGaolUpdateOne) Select(field string, fields ...string) *WeeklyGaolUpdateOne {
	wguo.fields = append([]string{field}, fields...)
	return wguo
}

// Save executes the query and returns the updated WeeklyGaol entity.
func (wguo *WeeklyGaolUpdateOne) Save(ctx context.Context) (*WeeklyGaol, error) {
	var (
		err  error
		node *WeeklyGaol
	)
	if len(wguo.hooks) == 0 {
		node, err = wguo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WeeklyGaolMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			wguo.mutation = mutation
			node, err = wguo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(wguo.hooks) - 1; i >= 0; i-- {
			if wguo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = wguo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wguo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (wguo *WeeklyGaolUpdateOne) SaveX(ctx context.Context) *WeeklyGaol {
	node, err := wguo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wguo *WeeklyGaolUpdateOne) Exec(ctx context.Context) error {
	_, err := wguo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wguo *WeeklyGaolUpdateOne) ExecX(ctx context.Context) {
	if err := wguo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wguo *WeeklyGaolUpdateOne) sqlSave(ctx context.Context) (_node *WeeklyGaol, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   weeklygaol.Table,
			Columns: weeklygaol.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: weeklygaol.FieldID,
			},
		},
	}
	id, ok := wguo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing WeeklyGaol.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := wguo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, weeklygaol.FieldID)
		for _, f := range fields {
			if !weeklygaol.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != weeklygaol.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wguo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wguo.mutation.Goal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: weeklygaol.FieldGoal,
		})
	}
	if value, ok := wguo.mutation.Score(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: weeklygaol.FieldScore,
		})
	}
	if value, ok := wguo.mutation.AddedScore(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: weeklygaol.FieldScore,
		})
	}
	if wguo.mutation.ScoreCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: weeklygaol.FieldScore,
		})
	}
	if value, ok := wguo.mutation.Nth(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: weeklygaol.FieldNth,
		})
	}
	if value, ok := wguo.mutation.AddedNth(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: weeklygaol.FieldNth,
		})
	}
	if wguo.mutation.DgaolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   weeklygaol.DgaolsTable,
			Columns: []string{weeklygaol.DgaolsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dailygaol.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wguo.mutation.RemovedDgaolsIDs(); len(nodes) > 0 && !wguo.mutation.DgaolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   weeklygaol.DgaolsTable,
			Columns: []string{weeklygaol.DgaolsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dailygaol.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wguo.mutation.DgaolsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   weeklygaol.DgaolsTable,
			Columns: []string{weeklygaol.DgaolsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dailygaol.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wguo.mutation.StudyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   weeklygaol.StudyTable,
			Columns: []string{weeklygaol.StudyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: study.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wguo.mutation.StudyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   weeklygaol.StudyTable,
			Columns: []string{weeklygaol.StudyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: study.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &WeeklyGaol{config: wguo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wguo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{weeklygaol.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
